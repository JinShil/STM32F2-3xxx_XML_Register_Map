<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright © 2015 Michael V. Franklin
     
    This file is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This file is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this file.  If not, see <http://www.gnu.org/licenses/>.
-->
<Peripheral>
  <Name>SCB</Name>
  <Description>The System control block (SCB) provides system implementation information, and system
control. This includes configuration, control, and reporting of the system exceptions.</Description>
  <Offset>0xE000ED00</Offset>
  <Registers>
  
    <Register>
      <Name>CPUID</Name>
      <Description>CPUID base register
Required privilege: Privileged
The CPUID register contains the processor part number, version, and implementation
information.</Description>
      <Offset>0x00</Offset>
      <ResetValue>0x410FC241</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>Implementer</Name>
          <Description>Implementer code 
0x41: ARM</Description>
          <EndBit>31</EndBit>
          <StartBit>24</StartBit>
          <Mutability>r</Mutability>
        </BitField>
        <BitField>
          <Name>Variant</Name>
          <Description>Variant number 
The r value in the rnpn product revision identifier
0x0: revision 0</Description>
          <EndBit>23</EndBit>
          <StartBit>20</StartBit>
          <Mutability>r</Mutability>
        </BitField>
        <BitField>
          <Name>Constant</Name>
          <Description>Reads as 0xF </Description>
          <EndBit>19</EndBit>
          <StartBit>16</StartBit>
          <Mutability>r</Mutability>
        </BitField>
        <BitField>
          <Name>PartNo</Name>
          <Description>Part number of the processor 
0xC24: = Cortex-M4</Description>
          <EndBit>15</EndBit>
          <StartBit>4</StartBit>
          <Mutability>r</Mutability>
        </BitField>
        <BitField>
          <Name>Revision</Name>
          <Description>Revision number 
The p value in the rnpn product revision identifier, indicates patch release.
0x1: = patch 1</Description>
          <EndBit>3</EndBit>
          <StartBit>0</StartBit>
          <Mutability>r</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>ICSR</Name>
      <Description>Interrupt control and state register
Required privilege: Privileged
The ICSR:
• Provides:
– A set-pending bit for the Non-Maskable Interrupt (NMI) exception
– Set-pending and clear-pending bits for the PendSV and SysTick exceptions
• Indicates:
– The exception number of the exception being processed
– Whether there are preempted active exceptions
– The exception number of the highest priority pending exception
– Whether any interrupts are pending.
Caution: When you write to the ICSR, the effect is unpredictable if you:
• Write 1 to the PENDSVSET bit and write 1 to the PENDSVCLR bit
• Write 1 to the PENDSTSET bit and write 1 to the PENDSTCLR bit.</Description>
      <Offset>0x04</Offset>
      <ResetValue>0x00000000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>NMIPENDSET</Name>
          <Description>NMI set-pending bit. 
Write:
0: No effect
1: Change NMI exception state to pending.
Read:
0: NMI exception is not pending
1: NMI exception is pending
Because NMI is the highest-priority exception, normally the processor enter the NMI
exception handler as soon as it registers a write of 1 to this bit, and entering the handler clears
this bit to 0. A read of this bit by the NMI exception handler returns 1 only if the NMI signal is
reasserted while the processor is executing that handler.</Description>
          <EndBit>31</EndBit>
          <StartBit>31</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>PENDSVSET</Name>
          <Description>PendSV set-pending bit. 
Write:
0: No effect
1: Change PendSV exception state to pending.
Read:
0: PendSV exception is not pending
1: PendSV exception is pending
Writing 1 to this bit is the only way to set the PendSV exception state to pending.</Description>
          <EndBit>28</EndBit>
          <StartBit>28</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>PENDSVCLR</Name>
          <Description>PendSV clear-pending bit. This bit is write-only. On a read, value is unknown. 
0: No effect
1: Removes the pending state from the PendSV exception.</Description>
          <EndBit>27</EndBit>
          <StartBit>27</StartBit>
          <Mutability>w</Mutability>
        </BitField>
        <BitField>
          <Name>PENDSTSET</Name>
          <Description>SysTick exception set-pending bit. 
Write:
0: No effect
1: Change SysTick exception state to pending
Read:
0: SysTick exception is not pending
1: SysTick exception is pending</Description>
          <EndBit>26</EndBit>
          <StartBit>26</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>PENDSTCLR</Name>
          <Description>SysTick exception clear-pending bit. Write-only. On a read, value is unknown. 
0: No effect
1: Removes the pending state from the SysTick exception.</Description>
          <EndBit>25</EndBit>
          <StartBit>25</StartBit>
          <Mutability>w</Mutability>
        </BitField>
        <BitField>
          <Name>This</Name>
          <Description>bit is reserved for Debug use and reads-as-zero when the processor is not in Debug. </Description>
          <EndBit>23</EndBit>
          <StartBit>23</StartBit>
          <Mutability>r</Mutability>
        </BitField>
        <BitField>
          <Name>ISRPENDING</Name>
          <Description>Interrupt pending flag, excluding NMI and Faults. 
0: Interrupt not pending
1: Interrupt pending</Description>
          <EndBit>22</EndBit>
          <StartBit>22</StartBit>
          <Mutability>r</Mutability>
        </BitField>
        <BitField>
          <Name>VECTPENDING</Name>
          <Description>Pending vector. Indicates the exception number of the highest priority 
pending enabled exception.
0: No pending exceptions
Other values: The exception number of the highest priority pending enabled exception.
The value indicated by this field includes the effect of the BASEPRI and FAULTMASK
registers, but not any effect of the PRIMASK register.</Description>
          <EndBit>18</EndBit>
          <StartBit>12</StartBit>
          <Mutability>r</Mutability>
        </BitField>
        <BitField>
          <Name>RETTOBASE</Name>
          <Description>Return to base level. Indicates whether there are preempted active 
exceptions:
0: There are preempted active exceptions to execute
1: There are no active exceptions, or the currently-executing exception is the only active
exception.</Description>
          <EndBit>11</EndBit>
          <StartBit>11</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>VECTACTIVE</Name>
          <Description>Active vector. Contains the active exception number: 
0: Thread mode
Other values: The exception number(1) of the currently active exception.
Note: Subtract 16 from this value to obtain CMSIS IRQ number required to index into the
Interrupt Clear-Enable, Set-Enable, Clear-Pending, Set-Pending, or Priority Registers,
see Table 6 on page 21.
(1) This is the same value as IPSR bits[8:0], see Interrupt program status register on page 21.</Description>
          <EndBit>8</EndBit>
          <StartBit>0</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>VTOR</Name>
      <Description>Vector table offset register
Required privilege: Privileged</Description>
      <Offset>0x08</Offset>
      <ResetValue>0x00000000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>TBLOFF</Name>
          <Description>Vector table base offset field. 
It contains bits [29:9] of the offset of the table base from memory address 0x00000000. When
setting TBLOFF, you must align the offset to the number of exception entries in the vector
table. The minimum alignment is 128 words. Table alignment requirements mean that bits[8:0]
of the table offset are always zero. Bit 29 determines whether the vector table is in the code or SRAM memory region.
0: Code
1: SRAM
Note: Bit 29 is sometimes called the TBLBASE bit.</Description>
          <EndBit>29</EndBit>
          <StartBit>9</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>AIRCR</Name>
      <Description>Application interrupt and reset control register
Required privilege: Privileged
The AIRCR provides priority grouping control for the exception model, endian status for data
accesses, and reset control of the system.
To write to this register, you must write 0x5FA to the VECTKEY field, otherwise the
processor ignores the write.</Description>
      <Offset>0x0C</Offset>
      <ResetValue>0xFA050000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>VECTKEYSTAT</Name>
          <Description>VECTKEY Register key 
Reads as 0xFA05
On writes, write 0x5FA to VECTKEY, otherwise the write is ignored.</Description>
          <EndBit>31</EndBit>
          <StartBit>16</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>ENDIANESS</Name>
          <Description>Data endianness bit 
Reads as 0.
0: Little-endian</Description>
          <EndBit>15</EndBit>
          <StartBit>15</StartBit>
          <Mutability>r</Mutability>
        </BitField>
        <BitField>
          <Name>PRIGROUP</Name>
          <Description>Interrupt priority grouping field 
This field determines the split of group priority from subpriority, see Binary point on page 213. 
The PRIGROUP field indicates the position of the binary point that splits the PRI_n fields in
the Interrupt Priority Registers into separate group priority and subpriority fields. Table 51
shows how the PRIGROUP value controls this split. If you implement fewer than 8 priority
bits you might require more explanation here, and want to remove invalid rows from the
table, and modify the entries in the number of columns.</Description>
          <EndBit>10</EndBit>
          <StartBit>8</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>SYSRESETREQ</Name>
          <Description>System reset request 
This is intended to force a large system reset of all major components except for debug.
This bit reads as 0.
0: No system reset request
1: Asserts a signal to the outer system that requests a reset.</Description>
          <EndBit>2</EndBit>
          <StartBit>2</StartBit>
          <Mutability>w</Mutability>
        </BitField>
        <BitField>
          <Name>VECTCLRACTIVE</Name>
          <Description>
Reserved for Debug use. This bit reads as 0. When writing to the register you must write 0 to
this bit, otherwise behavior is unpredictable.</Description>
          <EndBit>1</EndBit>
          <StartBit>1</StartBit>
          <Mutability>w</Mutability>
        </BitField>
        <BitField>
          <Name>VECTRESET</Name>
          <Description>
Reserved for Debug use. This bit reads as 0. When writing to the register you must write 0 to
this bit, otherwise behavior is unpredictable.</Description>
          <EndBit>0</EndBit>
          <StartBit>0</StartBit>
          <Mutability>w</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>SCR</Name>
      <Description>System control register
Required privilege: Privileged
The SCR controls features of entry to and exit from low power state.</Description>
      <Offset>0x10</Offset>
      <ResetValue>0x00000000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>SEVEONPEND</Name>
          <Description>Send Event on Pending bit 
When an event or interrupt enters pending state, the event signal wakes up the processor from
WFE. If the processor is not waiting for an event, the event is registered and affects the next
WFE.
The processor also wakes up on execution of an SEV instruction or an external event
0: Only enabled interrupts or events can wakeup the processor, disabled interrupts are
excluded
1: Enabled events and all interrupts, including disabled interrupts, can wakeup the
processor.</Description>
          <EndBit>4</EndBit>
          <StartBit>4</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>SLEEPDEEP</Name>
          <Description>
Controls whether the processor uses sleep or deep sleep as its low power mode:
0: Sleep
1: Deep sleep.</Description>
          <EndBit>2</EndBit>
          <StartBit>2</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>SLEEPONEXIT</Name>
          <Description>
Configures sleep-on-exit when returning from Handler mode to Thread mode. Setting this bit to
1 enables an interrupt-driven application to avoid returning to an empty main application.
0: Do not sleep when returning to Thread mode.
1: Enter sleep, or deep sleep, on return from an interrupt service routine.</Description>
          <EndBit>1</EndBit>
          <StartBit>1</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>CCR</Name>
      <Description>Configuration and control register
Required privilege: Privileged
The CCR controls entry to Thread mode and enables:
• The handlers for NMI, hard fault and faults escalated by FAULTMASK to ignore bus
faults
• Trapping of divide by zero and unaligned accesses
• Access to the STIR by unprivileged software, see Software trigger interrupt register
(NVIC_STIR) on page 201.</Description>
      <Offset>0x14</Offset>
      <ResetValue>0x00000200</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>STKALIGN</Name>
          <Description>
Configures stack alignment on exception entry. On exception entry, the processor uses bit 9 of
the stacked PSR to indicate the stack alignment. On return from the exception it uses this
stacked bit to restore the correct stack alignment.
0: 4-byte aligned
1: 8-byte aligned</Description>
          <EndBit>9</EndBit>
          <StartBit>9</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>BFHFNMIGN</Name>
          <Description>
Enables handlers with priority -1 or -2 to ignore data bus faults caused by load and store
instructions. This applies to the hard fault, NMI, and FAULTMASK escalated handlers. Set this
bit to 1 only when the handler and its data are in absolutely safe memory. The normal use of
this bit is to probe system devices and bridges to detect control path problems and fix them.
0: Data bus faults caused by load and store instructions cause a lock-up
1: Handlers running at priority -1 and -2 ignore data bus faults caused by load and store
instructions.</Description>
          <EndBit>8</EndBit>
          <StartBit>8</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>DIV_0_TRP</Name>
          <Description>
Enables faulting or halting when the processor executes an SDIV or UDIV instruction with a
divisor of 0:
0: Do not trap divide by 0
1: Trap divide by 0.
When this bit is set to 0, a divide by zero returns a quotient of 0.</Description>
          <EndBit>4</EndBit>
          <StartBit>4</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>UNALIGN</Name>
          <Description>TRP 
Enables unaligned access traps:
0: Do not trap unaligned halfword and word accesses
1: Trap unaligned halfword and word accesses.
If this bit is set to 1, an unaligned access generates a usage fault.
Unaligned LDM, STM, LDRD, and STRD instructions always fault irrespective of whether
UNALIGN_TRP is set to 1.</Description>
          <EndBit>3</EndBit>
          <StartBit>3</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>USERSETMPEND</Name>
          <Description>
Enables unprivileged software access to the STIR, see Software trigger interrupt register
(NVIC_STIR) on page 201:
0: Disable
1: Enable.</Description>
          <EndBit>1</EndBit>
          <StartBit>1</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>NONBASETHRDENA</Name>
          <Description>
Configures how the processor enters Thread mode.
0: Processor can enter Thread mode only when no exception is active.
1: Processor can enter Thread mode from any level under the control of an EXC_RETURN
value, see Exception return on page 43.</Description>
          <EndBit>0</EndBit>
          <StartBit>0</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>SHPR1</Name>
      <Description>System handler priority register 1
Required privilege: Privileged
TODO: Add information from Programmer's manual</Description>
      <Offset>0x18</Offset>
      <ResetValue>0x00000000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>PRI_6</Name>
          <Description>Priority of system handler 6, usage fault </Description>
          <EndBit>23</EndBit>
          <StartBit>16</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>PRI_5</Name>
          <Description>Priority of system handler 5, bus fault </Description>
          <EndBit>15</EndBit>
          <StartBit>8</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>PRI_4</Name>
          <Description>Priority of system handler 4, memory management fault </Description>
          <EndBit>7</EndBit>
          <StartBit>0</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>SHPR2</Name>
      <Description>System handler priority register 2
Required privilege: Privileged
TODO: Add information from Programmer's manual</Description>
      <Offset>0x1C</Offset>
      <ResetValue>0x00000000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>PRI_11</Name>
          <Description>Priority of system handler 11, SVCall </Description>
          <EndBit>31</EndBit>
          <StartBit>24</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>SHPR3</Name>
      <Description>System handler priority register 3
Required privilege: Privileged
TODO: Add information from Programmer's manual</Description>
      <Offset>0x20</Offset>
      <ResetValue>0x00000000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>PRI_15</Name>
          <Description>Priority of system handler 15, SysTick exception </Description>
          <EndBit>31</EndBit>
          <StartBit>24</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>PRI_14</Name>
          <Description>Priority of system handler 14, PendSV </Description>
          <EndBit>23</EndBit>
          <StartBit>16</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>SHCSR</Name>
      <Description>System handler control and state register
Required privilege: Privileged
The SHCSR enables the system handlers, and indicates:
• The pending status of the bus fault, memory management fault, and SVC exceptions
• The active status of the system handlers.
If you disable a system handler and the corresponding fault occurs, the processor treats the
fault as a hard fault.
You can write to this register to change the pending or active status of system exceptions.
An OS kernel can write to the active bits to perform a context switch that changes the
current exception type.
• Software that changes the value of an active bit in this register without correct
adjustment to the stacked content can cause the processor to generate a fault
exception. Ensure software that writes to this register retains and subsequently
restores the current active status.
• After you have enabled the system handlers, if you have to change the value of a bit in
this register you must use a read-modify-write procedure to ensure that you change
only the required bit.</Description>
      <Offset>0x24</Offset>
      <ResetValue>0x00000000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>USGFAULTENA</Name>
          <Description>Usage fault enable bit, set to 1 to enable. Enable bits, set to 1 to enable the exception, or set to 0 to disable the exception. </Description>
          <EndBit>18</EndBit>
          <StartBit>18</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>BUSFAULTENA</Name>
          <Description>Bus fault enable bit, set to 1 to enable. Enable bits, set to 1 to enable the exception, or set to 0 to disable the exception. </Description>
          <EndBit>17</EndBit>
          <StartBit>17</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>MEMFAULTENA</Name>
          <Description>Memory management fault enable bit, set to 1 to enable. Enable bits, set to 1 to enable the exception, or set to 0 to disable the exception. </Description>
          <EndBit>16</EndBit>
          <StartBit>16</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>SVCALLPENDED</Name>
          <Description>SVC call pending bit, reads as 1 if exception is pending. Pending bits, read as 1 if the exception is pending, or as 0 if it is not pending. You can write to these bits to change the 
pending status of the exceptions.</Description>
          <EndBit>15</EndBit>
          <StartBit>15</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>BUSFAULTPENDED</Name>
          <Description>Bus fault exception pending bit, reads as 1 if exception is pending. Pending bits, read as 1 if the exception is pending, or as 0 if it is not pending. You can write to these bits to change the </Description>
          <EndBit>14</EndBit>
          <StartBit>14</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>MEMFAULTPENDED</Name>
          <Description>Memory management fault exception pending bit, reads as 1 if 
exception is pending.  Pending bits, read as 1 if the exception is pending, or as 0 if it is not pending. You can write to these bits to change the</Description>
          <EndBit>13</EndBit>
          <StartBit>13</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>USGFAULTPENDED</Name>
          <Description>Usage fault exception pending bit, reads as 1 if exception is pending. Pending bits, read as 1 if the exception is pending, or as 0 if it is not pending. You can write to these bits to change the </Description>
          <EndBit>12</EndBit>
          <StartBit>12</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>SYSTICKACT</Name>
          <Description>SysTick exception active bit, reads as 1 if exception is active. Active bits, read as 1 if the exception is active, or as 0 if it is not active. You can write to these bits to change the active 
status of the exceptions, but see the Caution in this section.</Description>
          <EndBit>11</EndBit>
          <StartBit>11</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>PENDSVACT</Name>
          <Description>PendSV exception active bit, reads as 1 if exception is active </Description>
          <EndBit>10</EndBit>
          <StartBit>10</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>MONITORACT</Name>
          <Description>Debug monitor active bit, reads as 1 if Debug monitor is active </Description>
          <EndBit>8</EndBit>
          <StartBit>8</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>SVCALLACT</Name>
          <Description>SVC call active bit, reads as 1 if SVC call is active </Description>
          <EndBit>7</EndBit>
          <StartBit>7</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>USGFAULTACT</Name>
          <Description>Usage fault exception active bit, reads as 1 if exception is active </Description>
          <EndBit>3</EndBit>
          <StartBit>3</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>BUSFAULTACT</Name>
          <Description>Bus fault exception active bit, reads as 1 if exception is active </Description>
          <EndBit>1</EndBit>
          <StartBit>1</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
        <BitField>
          <Name>MEMFAULTACT</Name>
          <Description>Memory management fault exception active bit, reads as 1 if exception is 
active</Description>
          <EndBit>0</EndBit>
          <StartBit>0</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <!-- TODO: Add Configurable fault status register CFSR, UFSR, BFSR, MMFSR -->
    
    <Register>
      <Name>HFSR</Name>
      <Description>Hard fault status register
Required privilege: Privileged
The HFSR gives information about events that activate the hard fault handler. This register
is read, write to clear. This means that bits in the register read normally, but writing 1 to any
bit clears that bit to 0.</Description>
      <Offset>0x2C</Offset>
      <ResetValue>0x00000000</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>DEBUG_VT</Name>
          <Description>Reserved for Debug use. When writing to the register you must write 0 to this bit, 
otherwise behavior is unpredictable.</Description>
          <EndBit>31</EndBit>
          <StartBit>31</StartBit>
          <Mutability>rc_w1</Mutability>
        </BitField>
        <BitField>
          <Name>FORCED</Name>
          <Description>Forced hard fault. Indicates a forced hard fault, generated by escalation of a fault 
with configurable priority that cannot be handles, either because of priority or because it is
disabled.
When this bit is set to 1, the hard fault handler must read the other fault status registers to find
the cause of the fault.
0: No forced hard fault
1: Forced hard fault.</Description>
          <EndBit>30</EndBit>
          <StartBit>30</StartBit>
          <Mutability>rc_w1</Mutability>
        </BitField>
        <BitField>
          <Name>VECTTBL</Name>
          <Description>Vector table hard fault. Indicates a bus fault on a vector table read during 
exception processing. This error is always handled by the hard fault handler.
When this bit is set to 1, the PC value stacked for the exception return points to the instruction
that was preempted by the exception.
0: No bus fault on vector table read
1: Bus fault on vector table read.</Description>
          <EndBit>1</EndBit>
          <StartBit>1</StartBit>
          <Mutability>rc_w1</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>MMFAR</Name>
      <Description>Memory management fault address register
Required privilege: Privileged
The HFSR gives information about events that activate the hard fault handler. This register
is read, write to clear. This means that bits in the register read normally, but writing 1 to any
bit clears that bit to 0.</Description>
      <Offset>0x34</Offset>
      <ResetValue>0xXXXXXXXX</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>MMFAR</Name>
          <Description>Memory management fault address 
When the MMARVALID bit of the MMFSR is set to 1, this field holds the address of the
location that generated the memory management fault.
When an unaligned access faults, the address is the actual address that faulted. Because a
single read or write instruction can be split into multiple aligned accesses, the fault address
can be any address in the range of the requested access size.
Flags in the MMFSR register indicate the cause of the fault, and whether the value in the
MMFAR is valid. See Configurable fault status register (CFSR; UFSR+BFSR+MMFSR) on
page 221.</Description>
          <EndBit>31</EndBit>
          <StartBit>0</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>BFAR</Name>
      <Description>Bus fault address register
Required privilege: Privileged
The HFSR gives information about events that activate the hard fault handler. This register
is read, write to clear. This means that bits in the register read normally, but writing 1 to any
bit clears that bit to 0.</Description>
      <Offset>0x38</Offset>
      <ResetValue>0xXXXXXXXX</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>BFAR</Name>
          <Description>Bus fault address 
When the BFARVALID bit of the BFSR is set to 1, this field holds the address of the location
that generated the bus fault.
When an unaligned access faults the address in the BFAR is the one requested by the
instruction, even if it is not the address of the fault.
Flags in the BFSR register indicate the cause of the fault, and whether the value in the BFAR
is valid. See Configurable fault status register (CFSR; UFSR+BFSR+MMFSR) on page 221.</Description>
          <EndBit>31</EndBit>
          <StartBit>0</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
    <Register>
      <Name>AFSR</Name>
      <Description>Auxiliary fault status register
Required privilege: Privileged
The HFSR gives information about events that activate the hard fault handler. This register
is read, write to clear. This means that bits in the register read normally, but writing 1 to any
bit clears that bit to 0.</Description>
      <Offset>0x3C</Offset>
      <ResetValue>0xXXXXXXXX</ResetValue>
      <Access>Byte_HalfWord_Word</Access>
      <BitFields>
        <BitField>
          <Name>IMPDEF</Name>
          <Description>Implementation defined. The AFSR contains additional system fault information. The 
bits map to the AUXFAULT input signals.
This register is read, write to clear. This means that bits in the register read normally, but
writing 1 to any bit clears that bit to 0.
Each AFSR bit maps directly to an AUXFAULT input of the processor, and a single-cycle HIGH
signal on the input sets the corresponding AFSR bit to one. It remains set to 1 until you write 1
to the bit to clear it to zero.
When an AFSR bit is latched as one, an exception does not occur. Use an interrupt if an
exception is required.</Description>
          <EndBit>31</EndBit>
          <StartBit>0</StartBit>
          <Mutability>rw</Mutability>
        </BitField>
      </BitFields>
    </Register>
    
  </Registers>
</Peripheral>